IF EXISTS (SELECT 1 FROM [dbo].[HMR_SUBMISSION_STREAM] WHERE [STAGING_TABLE_NAME] = 'HMR_SALT_REPORT')
BEGIN
  PRINT 'HMR_SALT_REPORT already exists in STAGING_TABLE_NAME.'
END
ELSE
BEGIN
  INSERT INTO [dbo].[HMR_SUBMISSION_STREAM] ([SUBMISSION_STREAM_ID],[STREAM_NAME],[END_DATE],[FILE_SIZE_LIMIT],[STAGING_TABLE_NAME],[CONCURRENCY_CONTROL_NUMBER],[APP_CREATE_USERID],[APP_CREATE_TIMESTAMP],[APP_CREATE_USER_GUID],[APP_CREATE_USER_DIRECTORY],[APP_LAST_UPDATE_USERID],[APP_LAST_UPDATE_TIMESTAMP],[APP_LAST_UPDATE_USER_GUID],[APP_LAST_UPDATE_USER_DIRECTORY],[DB_AUDIT_CREATE_USERID],[DB_AUDIT_CREATE_TIMESTAMP],[DB_AUDIT_LAST_UPDATE_USERID],[DB_AUDIT_LAST_UPDATE_TIMESTAMP])
  VALUES (4,'Salt Reporting',NULL,NULL,'HMR_SALT_REPORT',1,user_name(),GETUTCDATE(),'31587d92-0297-4493-a7e5-c078c6ba0d37','IDIR',user_name(),GETUTCDATE(),'31587d92-0297-4493-a7e5-c078c6ba0d37','IDIR','IDIR\ISEAN',GETUTCDATE(),'IDIR\ISEAN',GETUTCDATE());
END
GO
/****** Object:  Sequence [dbo].[HMR_SALT_VULNAREA_H_ID_SEQ]    Script Date: 2024-05-24 2:31:56 PM ******/
CREATE SEQUENCE [dbo].[HMR_SALT_VULNAREA_H_ID_SEQ] 
 AS [bigint]
 START WITH 1
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 2147483647
 CACHE  50 
GO

/****** Object:  Sequence [dbo].[HMR_SLT_VULNAREA_ID_SEQ]    Script Date: 2024-05-24 2:32:19 PM ******/
CREATE SEQUENCE [dbo].[HMR_SLT_VULNAREA_ID_SEQ] 
 AS [bigint]
 START WITH 1
 INCREMENT BY 1
 MINVALUE 1
 MAXVALUE 999999999
 CACHE  50 
GO



/****** Object:  Table [dbo].[HMR_SALT_VULNAREA]    Script Date: 2024-05-24 2:30:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HMR_SALT_VULNAREA](
	[VULNAREA_ID] [numeric](9, 0) NOT NULL,
	[SALT_REPORT_ID] [numeric](9, 0) NOT NULL,
	[HWY_NO] [varchar](16) NULL,
	[LAT] [decimal](9, 6) NULL,
	[LONG] [decimal](9, 6) NULL,
	[FEATURE] [varchar](255) NULL,
	[TYPE] [varchar](255) NULL,
	[PROT_MEASURES] [varchar](255) NULL,
	[ENV_MONITORING] [bit] NULL,
	[COMMENTS] [nvarchar](255) NULL,
	[CONCURRENCY_CONTROL_NUMBER] [bigint] NULL,
	[APP_CREATE_USERID] [varchar](30) NULL,
	[APP_CREATE_TIMESTAMP] [datetime] NULL,
	[APP_CREATE_USER_GUID] [uniqueidentifier] NULL,
	[APP_CREATE_USER_DIRECTORY] [varchar](12) NULL,
	[APP_LAST_UPDATE_USERID] [varchar](30) NULL,
	[APP_LAST_UPDATE_TIMESTAMP] [datetime] NULL,
	[APP_LAST_UPDATE_USER_GUID] [uniqueidentifier] NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] [varchar](12) NULL,
	[DB_AUDIT_CREATE_USERID] [varchar](30) NULL,
	[DB_AUDIT_CREATE_TIMESTAMP] [datetime] NULL,
	[DB_AUDIT_LAST_UPDATE_USERID] [varchar](30) NULL,
	[DB_AUDIT_LAST_UPDATE_TIMESTAMP] [datetime] NULL,
 CONSTRAINT [HMR_SLTVUL_PK] PRIMARY KEY CLUSTERED 
(
	[VULNAREA_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HMR_SALT_VULNAREA_HIST]    Script Date: 2024-05-24 2:30:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HMR_SALT_VULNAREA_HIST](
	[SALT_VULNAREA_HIST_ID] [bigint] NOT NULL,
	[EFFECTIVE_DATE_HIST] [datetime] NOT NULL,
	[END_DATE_HIST] [datetime] NULL,
	[VULNAREA_ID] [numeric](18, 0) NOT NULL,
	[SALT_REPORT_ID] [numeric](18, 0) NOT NULL,
	[HWY_NO] [varchar](16) NULL,
	[LAT] [decimal](18, 0) NULL,
	[LONG] [decimal](18, 0) NULL,
	[FEATURE] [varchar](255) NULL,
	[TYPE] [varchar](255) NULL,
	[PROT_MEASURES] [varchar](255) NULL,
	[ENV_MONITORING] [bit] NULL,
	[COMMENTS] [nvarchar](255) NULL,
	[CONCURRENCY_CONTROL_NUMBER] [bigint] NULL,
	[APP_CREATE_USERID] [varchar](30) NULL,
	[APP_CREATE_TIMESTAMP] [datetime] NULL,
	[APP_CREATE_USER_GUID] [uniqueidentifier] NULL,
	[APP_CREATE_USER_DIRECTORY] [varchar](12) NULL,
	[APP_LAST_UPDATE_USERID] [varchar](30) NULL,
	[APP_LAST_UPDATE_TIMESTAMP] [datetime] NULL,
	[APP_LAST_UPDATE_USER_GUID] [uniqueidentifier] NULL,
	[APP_LAST_UPDATE_USER_DIRECTORY] [varchar](12) NULL,
	[DB_AUDIT_CREATE_USERID] [varchar](30) NULL,
	[DB_AUDIT_CREATE_TIMESTAMP] [datetime] NULL,
	[DB_AUDIT_LAST_UPDATE_USERID] [varchar](30) NULL,
	[DB_AUDIT_LAST_UPDATE_TIMESTAMP] [datetime] NULL,
 CONSTRAINT [HMR_SLTVUL_PK_H_PK] PRIMARY KEY CLUSTERED 
(
	[SALT_VULNAREA_HIST_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [HMR_SLTVUL_PK_H_UK] UNIQUE NONCLUSTERED 
(
	[SALT_VULNAREA_HIST_ID] ASC,
	[END_DATE_HIST] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA] ADD  CONSTRAINT [DF_HMR_SALT_VULNAREA_VULNAREA_ID]  DEFAULT (NEXT VALUE FOR [HMR_SLT_VULNAREA_ID_SEQ]) FOR [VULNAREA_ID]
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA] ADD  CONSTRAINT [DF__HMR_SALT___CONCU__67B44C51]  DEFAULT ((1)) FOR [CONCURRENCY_CONTROL_NUMBER]
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA] ADD  CONSTRAINT [DF__HMR_SALT___DB_AU__68A8708A]  DEFAULT (user_name()) FOR [DB_AUDIT_CREATE_USERID]
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA] ADD  CONSTRAINT [DF__HMR_SALT___DB_AU__699C94C3]  DEFAULT (getutcdate()) FOR [DB_AUDIT_CREATE_TIMESTAMP]
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA] ADD  CONSTRAINT [DF__HMR_SALT___DB_AU__6A90B8FC]  DEFAULT (user_name()) FOR [DB_AUDIT_LAST_UPDATE_USERID]
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA] ADD  CONSTRAINT [DF__HMR_SALT___DB_AU__6B84DD35]  DEFAULT (getutcdate()) FOR [DB_AUDIT_LAST_UPDATE_TIMESTAMP]
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA_HIST] ADD  DEFAULT (NEXT VALUE FOR [HMR_SALT_VULNAREA_H_ID_SEQ]) FOR [SALT_VULNAREA_HIST_ID]
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA_HIST] ADD  DEFAULT (getutcdate()) FOR [EFFECTIVE_DATE_HIST]
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA]  WITH CHECK ADD  CONSTRAINT [HMR_SALT_VULNAREA__SALT_REPORT_FK] FOREIGN KEY([SALT_REPORT_ID])
REFERENCES [dbo].[HMR_SALT_REPORT] ([SALT_REPORT_ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA] CHECK CONSTRAINT [HMR_SALT_VULNAREA__SALT_REPORT_FK]
GO
/****** Object:  Trigger [dbo].[HMR_SLTVUL_PK_A_S_IUD_TR]    Script Date: 2024-05-24 2:30:13 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[HMR_SLTVUL_PK_A_S_IUD_TR] ON [dbo].[HMR_SALT_VULNAREA] FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update HMR_SALT_VULNAREA_HIST set END_DATE_HIST = @curr_date where VULNAREA_ID in (select VULNAREA_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into HMR_SALT_VULNAREA_HIST ([VULNAREA_ID], [SALT_REPORT_ID], [HWY_NO], [LAT], [LONG], [FEATURE], [TYPE], [PROT_MEASURES], [ENV_MONITORING], [COMMENTS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], SALT_VULNAREA_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [VULNAREA_ID], [SALT_REPORT_ID], [HWY_NO], [LAT], [LONG], [FEATURE], [TYPE], [PROT_MEASURES], [ENV_MONITORING], [COMMENTS], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[HMR_SALT_VULNAREA_H_ID_SEQ]) as [SALT_VULNAREA_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA] ENABLE TRIGGER [HMR_SLTVUL_PK_A_S_IUD_TR]
GO
/****** Object:  Trigger [dbo].[HMR_SLTVUL_PK_I_S_I_TR]    Script Date: 2024-05-24 2:30:14 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[HMR_SLTVUL_PK_I_S_I_TR] ON [dbo].[HMR_SALT_VULNAREA] INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into HMR_SALT_VULNAREA ("VULNAREA_ID",
      "SALT_REPORT_ID",
      "HWY_NO",
      "LAT",
      "LONG",
      "FEATURE",
      "TYPE",
      "PROT_MEASURES",
      "ENV_MONITORING",
      "COMMENTS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_USERID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "VULNAREA_ID",
      "SALT_REPORT_ID",
      "HWY_NO",
      "LAT",
      "LONG",
      "FEATURE",
      "TYPE",
      "PROT_MEASURES",
      "ENV_MONITORING",
      "COMMENTS",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_USERID",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA] ENABLE TRIGGER [HMR_SLTVUL_PK_I_S_I_TR]
GO
/****** Object:  Trigger [dbo].[HMR_SLTVUL_PK_I_S_U_TR]    Script Date: 2024-05-24 2:30:14 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[HMR_SLTVUL_PK_I_S_U_TR] ON [dbo].[HMR_SALT_VULNAREA] INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.VULNAREA_ID = deleted.VULNAREA_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update HMR_SALT_VULNAREA
    set "VULNAREA_ID" = inserted."VULNAREA_ID",
      "SALT_REPORT_ID" = inserted."SALT_REPORT_ID",
      "HWY_NO" = inserted."HWY_NO",
      "LAT" = inserted."LAT",
      "LONG" = inserted."LONG",
      "FEATURE" = inserted."FEATURE",
      "TYPE" = inserted."TYPE",
      "PROT_MEASURES" = inserted."PROT_MEASURES",
      "ENV_MONITORING" = inserted."ENV_MONITORING",
      "COMMENTS" = inserted."COMMENTS",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_AUDIT_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_AUDIT_LAST_UPDATE_USERID = user_name()
    from HMR_SALT_VULNAREA
    inner join inserted
    on (HMR_SALT_VULNAREA.VULNAREA_ID = inserted.VULNAREA_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC hmr_error_handling
END CATCH;
GO
ALTER TABLE [dbo].[HMR_SALT_VULNAREA] ENABLE TRIGGER [HMR_SLTVUL_PK_I_S_U_TR]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Highway Number in String' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'HMR_SALT_VULNAREA', @level2type=N'COLUMN',@level2name=N'HWY_NO'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Latitude' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'HMR_SALT_VULNAREA', @level2type=N'COLUMN',@level2name=N'LAT'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Longitude' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'HMR_SALT_VULNAREA', @level2type=N'COLUMN',@level2name=N'LONG'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Feature
(ie: lake,
stream)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'HMR_SALT_VULNAREA', @level2type=N'COLUMN',@level2name=N'FEATURE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'HMR_SALT_VULNAREA', @level2type=N'COLUMN',@level2name=N'TYPE'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of
 Protection
Measures
(refer to Salt
Mgmt Plan)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'HMR_SALT_VULNAREA', @level2type=N'COLUMN',@level2name=N'PROT_MEASURES'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Is
Environmental
monitoring in
place? (Y/N)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'HMR_SALT_VULNAREA', @level2type=N'COLUMN',@level2name=N'ENV_MONITORING'
GO
